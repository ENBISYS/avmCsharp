/* 
 * AVM
 *
 * This is api for AVM (automated valuation machine)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@enbisys.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Enbisys.AVM.Client.OpenAPIDateConverter;

namespace Enbisys.AVM.Model
{
    /// <summary>
    /// RequiredFeatures
    /// </summary>
    [DataContract]
    public partial class RequiredFeatures :  IEquatable<RequiredFeatures>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets NewOrResale
        /// </summary>
        [DataMember(Name="newOrResale", EmitDefaultValue=false)]
        public NewOrResale NewOrResale { get; set; }
        /// <summary>
        /// Gets or Sets FloorLevel
        /// </summary>
        [DataMember(Name="floorLevel", EmitDefaultValue=false)]
        public FloorLevel FloorLevel { get; set; }
        /// <summary>
        /// Gets or Sets PropertyType
        /// </summary>
        [DataMember(Name="propertyType", EmitDefaultValue=false)]
        public PropertyType PropertyType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredFeatures" /> class.
        /// </summary>
        [JsonConstructor]
        protected RequiredFeatures() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequiredFeatures" /> class.
        /// </summary>
        /// <param name="postcode">Postcode (required).</param>
        /// <param name="newOrResale">newOrResale (required).</param>
        /// <param name="floorLevel">floorLevel (required).</param>
        /// <param name="totalFloorAreaInSqf">Floor area (sqf) (required).</param>
        /// <param name="propertyType">propertyType (required).</param>
        /// <param name="numberOfRooms">numberOfRooms (required).</param>
        public RequiredFeatures(string postcode = default(string), NewOrResale newOrResale = default(NewOrResale), FloorLevel floorLevel = default(FloorLevel), int totalFloorAreaInSqf = default(int), PropertyType propertyType = default(PropertyType), int numberOfRooms = default(int))
        {
            // to ensure "postcode" is required (not null)
            if (postcode == null)
            {
                throw new InvalidDataException("postcode is a required property for RequiredFeatures and cannot be null");
            }
            else
            {
                this.Postcode = postcode;
            }
            
            // to ensure "newOrResale" is required (not null)
            if (newOrResale == null)
            {
                throw new InvalidDataException("newOrResale is a required property for RequiredFeatures and cannot be null");
            }
            else
            {
                this.NewOrResale = newOrResale;
            }
            
            // to ensure "floorLevel" is required (not null)
            if (floorLevel == null)
            {
                throw new InvalidDataException("floorLevel is a required property for RequiredFeatures and cannot be null");
            }
            else
            {
                this.FloorLevel = floorLevel;
            }
            
            // to ensure "totalFloorAreaInSqf" is required (not null)
            if (totalFloorAreaInSqf == null)
            {
                throw new InvalidDataException("totalFloorAreaInSqf is a required property for RequiredFeatures and cannot be null");
            }
            else
            {
                this.TotalFloorAreaInSqf = totalFloorAreaInSqf;
            }
            
            // to ensure "propertyType" is required (not null)
            if (propertyType == null)
            {
                throw new InvalidDataException("propertyType is a required property for RequiredFeatures and cannot be null");
            }
            else
            {
                this.PropertyType = propertyType;
            }
            
            // to ensure "numberOfRooms" is required (not null)
            if (numberOfRooms == null)
            {
                throw new InvalidDataException("numberOfRooms is a required property for RequiredFeatures and cannot be null");
            }
            else
            {
                this.NumberOfRooms = numberOfRooms;
            }
            
        }
        
        /// <summary>
        /// Postcode
        /// </summary>
        /// <value>Postcode</value>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }



        /// <summary>
        /// Floor area (sqf)
        /// </summary>
        /// <value>Floor area (sqf)</value>
        [DataMember(Name="totalFloorAreaInSqf", EmitDefaultValue=false)]
        public int TotalFloorAreaInSqf { get; set; }


        /// <summary>
        /// Gets or Sets NumberOfRooms
        /// </summary>
        [DataMember(Name="numberOfRooms", EmitDefaultValue=false)]
        public int NumberOfRooms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequiredFeatures {\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  NewOrResale: ").Append(NewOrResale).Append("\n");
            sb.Append("  FloorLevel: ").Append(FloorLevel).Append("\n");
            sb.Append("  TotalFloorAreaInSqf: ").Append(TotalFloorAreaInSqf).Append("\n");
            sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
            sb.Append("  NumberOfRooms: ").Append(NumberOfRooms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequiredFeatures);
        }

        /// <summary>
        /// Returns true if RequiredFeatures instances are equal
        /// </summary>
        /// <param name="input">Instance of RequiredFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequiredFeatures input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.NewOrResale == input.NewOrResale ||
                    (this.NewOrResale != null &&
                    this.NewOrResale.Equals(input.NewOrResale))
                ) && 
                (
                    this.FloorLevel == input.FloorLevel ||
                    (this.FloorLevel != null &&
                    this.FloorLevel.Equals(input.FloorLevel))
                ) && 
                (
                    this.TotalFloorAreaInSqf == input.TotalFloorAreaInSqf ||
                    (this.TotalFloorAreaInSqf != null &&
                    this.TotalFloorAreaInSqf.Equals(input.TotalFloorAreaInSqf))
                ) && 
                (
                    this.PropertyType == input.PropertyType ||
                    (this.PropertyType != null &&
                    this.PropertyType.Equals(input.PropertyType))
                ) && 
                (
                    this.NumberOfRooms == input.NumberOfRooms ||
                    (this.NumberOfRooms != null &&
                    this.NumberOfRooms.Equals(input.NumberOfRooms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.NewOrResale != null)
                    hashCode = hashCode * 59 + this.NewOrResale.GetHashCode();
                if (this.FloorLevel != null)
                    hashCode = hashCode * 59 + this.FloorLevel.GetHashCode();
                if (this.TotalFloorAreaInSqf != null)
                    hashCode = hashCode * 59 + this.TotalFloorAreaInSqf.GetHashCode();
                if (this.PropertyType != null)
                    hashCode = hashCode * 59 + this.PropertyType.GetHashCode();
                if (this.NumberOfRooms != null)
                    hashCode = hashCode * 59 + this.NumberOfRooms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // TotalFloorAreaInSqf (int) maximum
            if(this.TotalFloorAreaInSqf > (int)10000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalFloorAreaInSqf, must be a value less than or equal to 10000.", new [] { "TotalFloorAreaInSqf" });
            }

            // TotalFloorAreaInSqf (int) minimum
            if(this.TotalFloorAreaInSqf < (int)50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TotalFloorAreaInSqf, must be a value greater than or equal to 50.", new [] { "TotalFloorAreaInSqf" });
            }

            // NumberOfRooms (int) maximum
            if(this.NumberOfRooms > (int)9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfRooms, must be a value less than or equal to 9.", new [] { "NumberOfRooms" });
            }

            // NumberOfRooms (int) minimum
            if(this.NumberOfRooms < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfRooms, must be a value greater than or equal to 1.", new [] { "NumberOfRooms" });
            }

            yield break;
        }
    }

}
