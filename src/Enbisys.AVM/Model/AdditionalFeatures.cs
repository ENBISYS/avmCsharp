/* 
 * AVM
 *
 * This is api for AVM (automated valuation machine)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@enbisys.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Enbisys.AVM.Client.OpenAPIDateConverter;

namespace Enbisys.AVM.Model
{
    /// <summary>
    /// AdditionalFeatures
    /// </summary>
    [DataContract]
    public partial class AdditionalFeatures :  IEquatable<AdditionalFeatures>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets LeaseholdOrFreehold
        /// </summary>
        [DataMember(Name="leaseholdOrFreehold", EmitDefaultValue=false)]
        public LeaseholdOrFreehold? LeaseholdOrFreehold { get; set; }
        /// <summary>
        /// Gets or Sets WallType
        /// </summary>
        [DataMember(Name="wallType", EmitDefaultValue=false)]
        public WallType? WallType { get; set; }
        /// <summary>
        /// Gets or Sets WallInsulation
        /// </summary>
        [DataMember(Name="wallInsulation", EmitDefaultValue=false)]
        public WallInsulation? WallInsulation { get; set; }
        /// <summary>
        /// Gets or Sets WallEnergyEfficiency
        /// </summary>
        [DataMember(Name="wallEnergyEfficiency", EmitDefaultValue=false)]
        public EnergyEfficiency? WallEnergyEfficiency { get; set; }
        /// <summary>
        /// Gets or Sets RoofType
        /// </summary>
        [DataMember(Name="roofType", EmitDefaultValue=false)]
        public RoofType? RoofType { get; set; }
        /// <summary>
        /// Gets or Sets RoofInsulation
        /// </summary>
        [DataMember(Name="roofInsulation", EmitDefaultValue=false)]
        public RoofInsulation? RoofInsulation { get; set; }
        /// <summary>
        /// Gets or Sets RoofEnergyEfficiency
        /// </summary>
        [DataMember(Name="roofEnergyEfficiency", EmitDefaultValue=false)]
        public EnergyEfficiency? RoofEnergyEfficiency { get; set; }
        /// <summary>
        /// Gets or Sets WindowGlazingType
        /// </summary>
        [DataMember(Name="windowGlazingType", EmitDefaultValue=false)]
        public WindowGlazingType? WindowGlazingType { get; set; }
        /// <summary>
        /// Gets or Sets WindowEnergyEfficiency
        /// </summary>
        [DataMember(Name="windowEnergyEfficiency", EmitDefaultValue=false)]
        public EnergyEfficiency? WindowEnergyEfficiency { get; set; }
        /// <summary>
        /// Gets or Sets CurrentEnergyRating
        /// </summary>
        [DataMember(Name="currentEnergyRating", EmitDefaultValue=false)]
        public EnergyRating? CurrentEnergyRating { get; set; }
        /// <summary>
        /// Gets or Sets PotentialEnergyRating
        /// </summary>
        [DataMember(Name="potentialEnergyRating", EmitDefaultValue=false)]
        public EnergyRating? PotentialEnergyRating { get; set; }
        /// <summary>
        /// Gets or Sets BuiltForm
        /// </summary>
        [DataMember(Name="builtForm", EmitDefaultValue=false)]
        public BuiltForm? BuiltForm { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalFeatures" /> class.
        /// </summary>
        /// <param name="priceOfPreviousSale">priceOfPreviousSale.</param>
        /// <param name="dateOfPreviousSale">dateOfPreviousSale.</param>
        /// <param name="leaseholdOrFreehold">leaseholdOrFreehold.</param>
        /// <param name="wallType">wallType.</param>
        /// <param name="wallInsulation">wallInsulation.</param>
        /// <param name="wallEnergyEfficiency">wallEnergyEfficiency.</param>
        /// <param name="roofType">roofType.</param>
        /// <param name="roofInsulation">roofInsulation.</param>
        /// <param name="roofEnergyEfficiency">roofEnergyEfficiency.</param>
        /// <param name="windowGlazingType">windowGlazingType.</param>
        /// <param name="windowEnergyEfficiency">windowEnergyEfficiency.</param>
        /// <param name="currentEnergyRating">currentEnergyRating.</param>
        /// <param name="potentialEnergyRating">potentialEnergyRating.</param>
        /// <param name="annualHeatingCostInPounds">annualHeatingCostInPounds.</param>
        /// <param name="annualHotWaterCostInPounds">annualHotWaterCostInPounds.</param>
        /// <param name="annualLightingCostInPounds">annualLightingCostInPounds.</param>
        /// <param name="annualEnergyConsumptionInKWh">annualEnergyConsumptionInKWh.</param>
        /// <param name="floorHeightInFoot">floorHeightInFoot.</param>
        /// <param name="builtForm">builtForm.</param>
        public AdditionalFeatures(int? priceOfPreviousSale = default(int?), DateTime? dateOfPreviousSale = default(DateTime?), LeaseholdOrFreehold leaseholdOrFreehold = default(LeaseholdOrFreehold), WallType wallType = default(WallType), WallInsulation wallInsulation = default(WallInsulation), EnergyEfficiency wallEnergyEfficiency = default(EnergyEfficiency), RoofType roofType = default(RoofType), RoofInsulation roofInsulation = default(RoofInsulation), EnergyEfficiency roofEnergyEfficiency = default(EnergyEfficiency), WindowGlazingType windowGlazingType = default(WindowGlazingType), EnergyEfficiency windowEnergyEfficiency = default(EnergyEfficiency), EnergyRating currentEnergyRating = default(EnergyRating), EnergyRating potentialEnergyRating = default(EnergyRating), int? annualHeatingCostInPounds = default(int?), int? annualHotWaterCostInPounds = default(int?), int? annualLightingCostInPounds = default(int?), int? annualEnergyConsumptionInKWh = default(int?), float? floorHeightInFoot = default(float?), BuiltForm builtForm = default(BuiltForm))
        {
            this.PriceOfPreviousSale = priceOfPreviousSale;
            this.DateOfPreviousSale = dateOfPreviousSale;
            this.LeaseholdOrFreehold = leaseholdOrFreehold;
            this.WallType = wallType;
            this.WallInsulation = wallInsulation;
            this.WallEnergyEfficiency = wallEnergyEfficiency;
            this.RoofType = roofType;
            this.RoofInsulation = roofInsulation;
            this.RoofEnergyEfficiency = roofEnergyEfficiency;
            this.WindowGlazingType = windowGlazingType;
            this.WindowEnergyEfficiency = windowEnergyEfficiency;
            this.CurrentEnergyRating = currentEnergyRating;
            this.PotentialEnergyRating = potentialEnergyRating;
            this.AnnualHeatingCostInPounds = annualHeatingCostInPounds;
            this.AnnualHotWaterCostInPounds = annualHotWaterCostInPounds;
            this.AnnualLightingCostInPounds = annualLightingCostInPounds;
            this.AnnualEnergyConsumptionInKWh = annualEnergyConsumptionInKWh;
            this.FloorHeightInFoot = floorHeightInFoot;
            this.BuiltForm = builtForm;
        }
        
        /// <summary>
        /// Gets or Sets PriceOfPreviousSale
        /// </summary>
        [DataMember(Name="priceOfPreviousSale", EmitDefaultValue=false)]
        public int? PriceOfPreviousSale { get; set; }

        /// <summary>
        /// Gets or Sets DateOfPreviousSale
        /// </summary>
        [DataMember(Name="dateOfPreviousSale", EmitDefaultValue=false)]
        [JsonConverter(typeof(Client.OpenAPIDateConverter))]
        public DateTime? DateOfPreviousSale { get; set; }












        /// <summary>
        /// Gets or Sets AnnualHeatingCostInPounds
        /// </summary>
        [DataMember(Name="annualHeatingCostInPounds", EmitDefaultValue=false)]
        public int? AnnualHeatingCostInPounds { get; set; }

        /// <summary>
        /// Gets or Sets AnnualHotWaterCostInPounds
        /// </summary>
        [DataMember(Name="annualHotWaterCostInPounds", EmitDefaultValue=false)]
        public int? AnnualHotWaterCostInPounds { get; set; }

        /// <summary>
        /// Gets or Sets AnnualLightingCostInPounds
        /// </summary>
        [DataMember(Name="annualLightingCostInPounds", EmitDefaultValue=false)]
        public int? AnnualLightingCostInPounds { get; set; }

        /// <summary>
        /// Gets or Sets AnnualEnergyConsumptionInKWh
        /// </summary>
        [DataMember(Name="annualEnergyConsumptionInKWh", EmitDefaultValue=false)]
        public int? AnnualEnergyConsumptionInKWh { get; set; }

        /// <summary>
        /// Gets or Sets FloorHeightInFoot
        /// </summary>
        [DataMember(Name="floorHeightInFoot", EmitDefaultValue=false)]
        public float? FloorHeightInFoot { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalFeatures {\n");
            sb.Append("  PriceOfPreviousSale: ").Append(PriceOfPreviousSale).Append("\n");
            sb.Append("  DateOfPreviousSale: ").Append(DateOfPreviousSale).Append("\n");
            sb.Append("  LeaseholdOrFreehold: ").Append(LeaseholdOrFreehold).Append("\n");
            sb.Append("  WallType: ").Append(WallType).Append("\n");
            sb.Append("  WallInsulation: ").Append(WallInsulation).Append("\n");
            sb.Append("  WallEnergyEfficiency: ").Append(WallEnergyEfficiency).Append("\n");
            sb.Append("  RoofType: ").Append(RoofType).Append("\n");
            sb.Append("  RoofInsulation: ").Append(RoofInsulation).Append("\n");
            sb.Append("  RoofEnergyEfficiency: ").Append(RoofEnergyEfficiency).Append("\n");
            sb.Append("  WindowGlazingType: ").Append(WindowGlazingType).Append("\n");
            sb.Append("  WindowEnergyEfficiency: ").Append(WindowEnergyEfficiency).Append("\n");
            sb.Append("  CurrentEnergyRating: ").Append(CurrentEnergyRating).Append("\n");
            sb.Append("  PotentialEnergyRating: ").Append(PotentialEnergyRating).Append("\n");
            sb.Append("  AnnualHeatingCostInPounds: ").Append(AnnualHeatingCostInPounds).Append("\n");
            sb.Append("  AnnualHotWaterCostInPounds: ").Append(AnnualHotWaterCostInPounds).Append("\n");
            sb.Append("  AnnualLightingCostInPounds: ").Append(AnnualLightingCostInPounds).Append("\n");
            sb.Append("  AnnualEnergyConsumptionInKWh: ").Append(AnnualEnergyConsumptionInKWh).Append("\n");
            sb.Append("  FloorHeightInFoot: ").Append(FloorHeightInFoot).Append("\n");
            sb.Append("  BuiltForm: ").Append(BuiltForm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalFeatures);
        }

        /// <summary>
        /// Returns true if AdditionalFeatures instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalFeatures to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalFeatures input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PriceOfPreviousSale == input.PriceOfPreviousSale ||
                    (this.PriceOfPreviousSale != null &&
                    this.PriceOfPreviousSale.Equals(input.PriceOfPreviousSale))
                ) && 
                (
                    this.DateOfPreviousSale == input.DateOfPreviousSale ||
                    (this.DateOfPreviousSale != null &&
                    this.DateOfPreviousSale.Equals(input.DateOfPreviousSale))
                ) && 
                (
                    this.LeaseholdOrFreehold == input.LeaseholdOrFreehold ||
                    (this.LeaseholdOrFreehold != null &&
                    this.LeaseholdOrFreehold.Equals(input.LeaseholdOrFreehold))
                ) && 
                (
                    this.WallType == input.WallType ||
                    (this.WallType != null &&
                    this.WallType.Equals(input.WallType))
                ) && 
                (
                    this.WallInsulation == input.WallInsulation ||
                    (this.WallInsulation != null &&
                    this.WallInsulation.Equals(input.WallInsulation))
                ) && 
                (
                    this.WallEnergyEfficiency == input.WallEnergyEfficiency ||
                    (this.WallEnergyEfficiency != null &&
                    this.WallEnergyEfficiency.Equals(input.WallEnergyEfficiency))
                ) && 
                (
                    this.RoofType == input.RoofType ||
                    (this.RoofType != null &&
                    this.RoofType.Equals(input.RoofType))
                ) && 
                (
                    this.RoofInsulation == input.RoofInsulation ||
                    (this.RoofInsulation != null &&
                    this.RoofInsulation.Equals(input.RoofInsulation))
                ) && 
                (
                    this.RoofEnergyEfficiency == input.RoofEnergyEfficiency ||
                    (this.RoofEnergyEfficiency != null &&
                    this.RoofEnergyEfficiency.Equals(input.RoofEnergyEfficiency))
                ) && 
                (
                    this.WindowGlazingType == input.WindowGlazingType ||
                    (this.WindowGlazingType != null &&
                    this.WindowGlazingType.Equals(input.WindowGlazingType))
                ) && 
                (
                    this.WindowEnergyEfficiency == input.WindowEnergyEfficiency ||
                    (this.WindowEnergyEfficiency != null &&
                    this.WindowEnergyEfficiency.Equals(input.WindowEnergyEfficiency))
                ) && 
                (
                    this.CurrentEnergyRating == input.CurrentEnergyRating ||
                    (this.CurrentEnergyRating != null &&
                    this.CurrentEnergyRating.Equals(input.CurrentEnergyRating))
                ) && 
                (
                    this.PotentialEnergyRating == input.PotentialEnergyRating ||
                    (this.PotentialEnergyRating != null &&
                    this.PotentialEnergyRating.Equals(input.PotentialEnergyRating))
                ) && 
                (
                    this.AnnualHeatingCostInPounds == input.AnnualHeatingCostInPounds ||
                    (this.AnnualHeatingCostInPounds != null &&
                    this.AnnualHeatingCostInPounds.Equals(input.AnnualHeatingCostInPounds))
                ) && 
                (
                    this.AnnualHotWaterCostInPounds == input.AnnualHotWaterCostInPounds ||
                    (this.AnnualHotWaterCostInPounds != null &&
                    this.AnnualHotWaterCostInPounds.Equals(input.AnnualHotWaterCostInPounds))
                ) && 
                (
                    this.AnnualLightingCostInPounds == input.AnnualLightingCostInPounds ||
                    (this.AnnualLightingCostInPounds != null &&
                    this.AnnualLightingCostInPounds.Equals(input.AnnualLightingCostInPounds))
                ) && 
                (
                    this.AnnualEnergyConsumptionInKWh == input.AnnualEnergyConsumptionInKWh ||
                    (this.AnnualEnergyConsumptionInKWh != null &&
                    this.AnnualEnergyConsumptionInKWh.Equals(input.AnnualEnergyConsumptionInKWh))
                ) && 
                (
                    this.FloorHeightInFoot == input.FloorHeightInFoot ||
                    (this.FloorHeightInFoot != null &&
                    this.FloorHeightInFoot.Equals(input.FloorHeightInFoot))
                ) && 
                (
                    this.BuiltForm == input.BuiltForm ||
                    (this.BuiltForm != null &&
                    this.BuiltForm.Equals(input.BuiltForm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PriceOfPreviousSale != null)
                    hashCode = hashCode * 59 + this.PriceOfPreviousSale.GetHashCode();
                if (this.DateOfPreviousSale != null)
                    hashCode = hashCode * 59 + this.DateOfPreviousSale.GetHashCode();
                if (this.LeaseholdOrFreehold != null)
                    hashCode = hashCode * 59 + this.LeaseholdOrFreehold.GetHashCode();
                if (this.WallType != null)
                    hashCode = hashCode * 59 + this.WallType.GetHashCode();
                if (this.WallInsulation != null)
                    hashCode = hashCode * 59 + this.WallInsulation.GetHashCode();
                if (this.WallEnergyEfficiency != null)
                    hashCode = hashCode * 59 + this.WallEnergyEfficiency.GetHashCode();
                if (this.RoofType != null)
                    hashCode = hashCode * 59 + this.RoofType.GetHashCode();
                if (this.RoofInsulation != null)
                    hashCode = hashCode * 59 + this.RoofInsulation.GetHashCode();
                if (this.RoofEnergyEfficiency != null)
                    hashCode = hashCode * 59 + this.RoofEnergyEfficiency.GetHashCode();
                if (this.WindowGlazingType != null)
                    hashCode = hashCode * 59 + this.WindowGlazingType.GetHashCode();
                if (this.WindowEnergyEfficiency != null)
                    hashCode = hashCode * 59 + this.WindowEnergyEfficiency.GetHashCode();
                if (this.CurrentEnergyRating != null)
                    hashCode = hashCode * 59 + this.CurrentEnergyRating.GetHashCode();
                if (this.PotentialEnergyRating != null)
                    hashCode = hashCode * 59 + this.PotentialEnergyRating.GetHashCode();
                if (this.AnnualHeatingCostInPounds != null)
                    hashCode = hashCode * 59 + this.AnnualHeatingCostInPounds.GetHashCode();
                if (this.AnnualHotWaterCostInPounds != null)
                    hashCode = hashCode * 59 + this.AnnualHotWaterCostInPounds.GetHashCode();
                if (this.AnnualLightingCostInPounds != null)
                    hashCode = hashCode * 59 + this.AnnualLightingCostInPounds.GetHashCode();
                if (this.AnnualEnergyConsumptionInKWh != null)
                    hashCode = hashCode * 59 + this.AnnualEnergyConsumptionInKWh.GetHashCode();
                if (this.FloorHeightInFoot != null)
                    hashCode = hashCode * 59 + this.FloorHeightInFoot.GetHashCode();
                if (this.BuiltForm != null)
                    hashCode = hashCode * 59 + this.BuiltForm.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PriceOfPreviousSale (int?) minimum
            if(this.PriceOfPreviousSale < (int?)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PriceOfPreviousSale, must be a value greater than or equal to 1.", new [] { "PriceOfPreviousSale" });
            }

            yield break;
        }
    }

}
