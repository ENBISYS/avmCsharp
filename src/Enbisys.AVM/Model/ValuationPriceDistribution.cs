/* 
 * AVM
 *
 * This is api for AVM (automated valuation machine)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@enbisys.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Enbisys.AVM.Client.OpenAPIDateConverter;

namespace Enbisys.AVM.Model
{
    /// <summary>
    /// ValuationPriceDistribution
    /// </summary>
    [DataContract]
    public partial class ValuationPriceDistribution :  IEquatable<ValuationPriceDistribution>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValuationPriceDistribution" /> class.
        /// </summary>
        /// <param name="priceFrom">left subrange boundary.</param>
        /// <param name="priceTo">right subrange boundary.</param>
        /// <param name="probability">Probability that price is within the specified boundaries.</param>
        public ValuationPriceDistribution(int? priceFrom = default(int?), int? priceTo = default(int?), double? probability = default(double?))
        {
            this.PriceFrom = priceFrom;
            this.PriceTo = priceTo;
            this.Probability = probability;
        }
        
        /// <summary>
        /// left subrange boundary
        /// </summary>
        /// <value>left subrange boundary</value>
        [DataMember(Name="priceFrom", EmitDefaultValue=false)]
        public int? PriceFrom { get; set; }

        /// <summary>
        /// right subrange boundary
        /// </summary>
        /// <value>right subrange boundary</value>
        [DataMember(Name="priceTo", EmitDefaultValue=false)]
        public int? PriceTo { get; set; }

        /// <summary>
        /// Probability that price is within the specified boundaries
        /// </summary>
        /// <value>Probability that price is within the specified boundaries</value>
        [DataMember(Name="probability", EmitDefaultValue=false)]
        public double? Probability { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValuationPriceDistribution {\n");
            sb.Append("  PriceFrom: ").Append(PriceFrom).Append("\n");
            sb.Append("  PriceTo: ").Append(PriceTo).Append("\n");
            sb.Append("  Probability: ").Append(Probability).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValuationPriceDistribution);
        }

        /// <summary>
        /// Returns true if ValuationPriceDistribution instances are equal
        /// </summary>
        /// <param name="input">Instance of ValuationPriceDistribution to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValuationPriceDistribution input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PriceFrom == input.PriceFrom ||
                    (this.PriceFrom != null &&
                    this.PriceFrom.Equals(input.PriceFrom))
                ) && 
                (
                    this.PriceTo == input.PriceTo ||
                    (this.PriceTo != null &&
                    this.PriceTo.Equals(input.PriceTo))
                ) && 
                (
                    this.Probability == input.Probability ||
                    (this.Probability != null &&
                    this.Probability.Equals(input.Probability))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PriceFrom != null)
                    hashCode = hashCode * 59 + this.PriceFrom.GetHashCode();
                if (this.PriceTo != null)
                    hashCode = hashCode * 59 + this.PriceTo.GetHashCode();
                if (this.Probability != null)
                    hashCode = hashCode * 59 + this.Probability.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
