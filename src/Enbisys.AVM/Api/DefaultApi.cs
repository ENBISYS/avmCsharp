/* 
 * AVM
 *
 * This is api for AVM (automated valuation machine)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@enbisys.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Enbisys.AVM.Client;
using Enbisys.AVM.Model;
using RestSharp;

namespace Enbisys.AVM.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get only property price valuation without confidence estimation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features that describe property</param>
        /// <returns>int?</returns>
        int? GetFastValuation (PropertyFeatures propertyFeatures);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get only property price valuation without confidence estimation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features that describe property</param>
        /// <returns>ApiResponse of int?</returns>
        ApiResponse<int?> GetFastValuationWithHttpInfo (PropertyFeatures propertyFeatures);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get property price valuation with confidence estimation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features to valuate</param>
        /// <returns>Valuation</returns>
        Valuation GetValuation (PropertyFeatures propertyFeatures);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get property price valuation with confidence estimation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features to valuate</param>
        /// <returns>ApiResponse of Valuation</returns>
        ApiResponse<Valuation> GetValuationWithHttpInfo (PropertyFeatures propertyFeatures);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get only property price valuation without confidence estimation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features that describe property</param>
        /// <returns>Task of int?</returns>
        System.Threading.Tasks.Task<int?> GetFastValuationAsync (PropertyFeatures propertyFeatures);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get only property price valuation without confidence estimation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features that describe property</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        System.Threading.Tasks.Task<ApiResponse<int?>> GetFastValuationAsyncWithHttpInfo (PropertyFeatures propertyFeatures);
        
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get property price valuation with confidence estimation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features to valuate</param>
        /// <returns>Task of Valuation</returns>
        System.Threading.Tasks.Task<Valuation> GetValuationAsync (PropertyFeatures propertyFeatures);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get property price valuation with confidence estimation
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features to valuate</param>
        /// <returns>Task of ApiResponse (Valuation)</returns>
        System.Threading.Tasks.Task<ApiResponse<Valuation>> GetValuationAsyncWithHttpInfo (PropertyFeatures propertyFeatures);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = Client.Configuration.Default;

            ExceptionFactory = Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Get only property price valuation without confidence estimation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features that describe property</param>
        /// <returns>int?</returns>
        public int? GetFastValuation (PropertyFeatures propertyFeatures)
        {
             ApiResponse<int?> localVarResponse = GetFastValuationWithHttpInfo(propertyFeatures);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get only property price valuation without confidence estimation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features that describe property</param>
        /// <returns>ApiResponse of int?</returns>
        public ApiResponse< int? > GetFastValuationWithHttpInfo (PropertyFeatures propertyFeatures)
        {
            // verify the required parameter 'propertyFeatures' is set
            if (propertyFeatures == null)
                throw new ApiException(400, "Missing required parameter 'propertyFeatures' when calling DefaultApi->GetFastValuation");

            var localVarPath = "/properties/getFastValuation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyFeatures != null && propertyFeatures.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(propertyFeatures); // http body (model) parameter
            }
            else
            {
                localVarPostBody = propertyFeatures; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFastValuation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }

        /// <summary>
        ///  Get only property price valuation without confidence estimation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features that describe property</param>
        /// <returns>Task of int?</returns>
        public async System.Threading.Tasks.Task<int?> GetFastValuationAsync (PropertyFeatures propertyFeatures)
        {
             ApiResponse<int?> localVarResponse = await GetFastValuationAsyncWithHttpInfo(propertyFeatures);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get only property price valuation without confidence estimation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features that describe property</param>
        /// <returns>Task of ApiResponse (int?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<int?>> GetFastValuationAsyncWithHttpInfo (PropertyFeatures propertyFeatures)
        {
            // verify the required parameter 'propertyFeatures' is set
            if (propertyFeatures == null)
                throw new ApiException(400, "Missing required parameter 'propertyFeatures' when calling DefaultApi->GetFastValuation");

            var localVarPath = "/properties/getFastValuation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyFeatures != null && propertyFeatures.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(propertyFeatures); // http body (model) parameter
            }
            else
            {
                localVarPostBody = propertyFeatures; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetFastValuation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<int?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (int?) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(int?)));
        }
        
        /// <summary>
        ///  Get property price valuation with confidence estimation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features to valuate</param>
        /// <returns>Valuation</returns>
        public Valuation GetValuation (PropertyFeatures propertyFeatures)
        {
             ApiResponse<Valuation> localVarResponse = GetValuationWithHttpInfo(propertyFeatures);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get property price valuation with confidence estimation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features to valuate</param>
        /// <returns>ApiResponse of Valuation</returns>
        public ApiResponse< Valuation > GetValuationWithHttpInfo (PropertyFeatures propertyFeatures)
        {
            // verify the required parameter 'propertyFeatures' is set
            if (propertyFeatures == null)
                throw new ApiException(400, "Missing required parameter 'propertyFeatures' when calling DefaultApi->GetValuation");

            var localVarPath = "/properties/getValuation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyFeatures != null && propertyFeatures.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(propertyFeatures); // http body (model) parameter
            }
            else
            {
                localVarPostBody = propertyFeatures; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetValuation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Valuation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Valuation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Valuation)));
        }

        /// <summary>
        ///  Get property price valuation with confidence estimation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features to valuate</param>
        /// <returns>Task of Valuation</returns>
        public async System.Threading.Tasks.Task<Valuation> GetValuationAsync (PropertyFeatures propertyFeatures)
        {
             ApiResponse<Valuation> localVarResponse = await GetValuationAsyncWithHttpInfo(propertyFeatures);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get property price valuation with confidence estimation
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="propertyFeatures">Property features to valuate</param>
        /// <returns>Task of ApiResponse (Valuation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Valuation>> GetValuationAsyncWithHttpInfo (PropertyFeatures propertyFeatures)
        {
            // verify the required parameter 'propertyFeatures' is set
            if (propertyFeatures == null)
                throw new ApiException(400, "Missing required parameter 'propertyFeatures' when calling DefaultApi->GetValuation");

            var localVarPath = "/properties/getValuation";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (propertyFeatures != null && propertyFeatures.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(propertyFeatures); // http body (model) parameter
            }
            else
            {
                localVarPostBody = propertyFeatures; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-KEY")))
            {
                localVarHeaderParams["X-API-KEY"] = this.Configuration.GetApiKeyWithPrefix("X-API-KEY");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetValuation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Valuation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Valuation) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Valuation)));
        }

    }
}
